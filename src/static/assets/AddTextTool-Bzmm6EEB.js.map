{"version":3,"file":"AddTextTool-Bzmm6EEB.js","sources":["../../src/components/InteractiveCanvas.jsx","../../src/components/ui/textarea.jsx","../../src/components/ui/radio-group.jsx","../../src/components/TextSettingsPanel.jsx","../../src/tools/AddTextTool.jsx"],"sourcesContent":["import React, { useRef, useEffect, useState } from 'react'\n\nexport default function InteractiveCanvas({ \n  imageUrl, \n  text, \n  textSettings, \n  textLayers, // optional array of layers\n  onTextPositionChange \n}) {\n  const canvasRef = useRef(null)\n  const imageRef = useRef(null)\n  const [canvasSize, setCanvasSize] = useState({ width: 800, height: 600 })\n  const [imageLoaded, setImageLoaded] = useState(false)\n  const [textSize, setTextSize] = useState({ width: 0, height: 0 })\n\n  // Load image only when imageUrl changes\n  useEffect(() => {\n    if (!imageUrl) return\n    const img = new Image()\n    img.onload = () => {\n      // Fit image to max 800x600, keep aspect ratio\n      const maxWidth = 800\n      const maxHeight = 600\n      let { width, height } = img\n      if (width > maxWidth) {\n        height = (height * maxWidth) / width\n        width = maxWidth\n      }\n      if (height > maxHeight) {\n        width = (width * maxHeight) / height\n        height = maxHeight\n      }\n      setCanvasSize({ width, height })\n      imageRef.current = img\n      setImageLoaded(true)\n    }\n    img.crossOrigin = 'anonymous'\n    img.src = imageUrl\n  }, [imageUrl])\n\n  // Draw image and text whenever imageLoaded, text, or settings change\n  useEffect(() => {\n    if (!imageLoaded || !canvasRef.current || !imageRef.current) return\n    const canvas = canvasRef.current\n    const ctx = canvas.getContext('2d')\n    const img = imageRef.current\n    const { width, height } = canvasSize\n    canvas.width = width\n    canvas.height = height\n    ctx.clearRect(0, 0, width, height)\n    ctx.drawImage(img, 0, 0, width, height)\n    const layers = Array.isArray(textLayers) && textLayers.length > 0\n      ? textLayers\n      : (text && textSettings ? [{ ...textSettings, text }] : [])\n\n    layers.forEach(layer => {\n      const initialFontSize = Number(layer.fontSize || 24)\n      const fontFamily = layer.fontFamily || 'Arial'\n      const maxWidthRatio = (layer.maxWidthRatio ?? 0.95)\n      const lineHeightMult = (layer.lineHeight ?? 1.2)\n      const autoFit = (layer.autoFit ?? true)\n\n      let effectiveFont = initialFontSize\n      ctx.font = `${effectiveFont}px ${fontFamily}`\n      const maxWidth = Math.round(maxWidthRatio * width)\n      let lines = wrapCanvasText(ctx, layer.text || '', maxWidth)\n      let lineHeight = Math.max(10, Math.round(effectiveFont * lineHeightMult))\n      let blockHeight = lines.length * lineHeight\n      let blockWidth = lines.reduce((m, l) => Math.max(m, ctx.measureText(l).width), 0)\n\n      if (autoFit) {\n        let guard = 0\n        while ((blockHeight > height * 0.95) && effectiveFont > 8 && guard < 50) {\n          effectiveFont = Math.max(8, Math.floor(effectiveFont * 0.9))\n          ctx.font = `${effectiveFont}px ${fontFamily}`\n          lineHeight = Math.max(10, Math.round(effectiveFont * lineHeightMult))\n          lines = wrapCanvasText(ctx, layer.text || '', maxWidth)\n          blockHeight = lines.length * lineHeight\n          blockWidth = lines.reduce((m, l) => Math.max(m, ctx.measureText(l).width), 0)\n          guard++\n        }\n      }\n\n      const tSize = { width: blockWidth, height: blockHeight }\n      setTextSize(tSize)\n      if ((layer.text || '').trim()) {\n        const drawSettings = { ...layer, fontSize: effectiveFont }\n        drawText(ctx, lines, drawSettings, width, height, tSize, lineHeight)\n      }\n    })\n  }, [imageLoaded, text, textSettings, canvasSize, textLayers])\n\n  // Draw text at x/y position from settings\n  const drawText = (ctx, lines, settings, canvasWidth, canvasHeight, tSize, lineHeight) => {\n    if (!lines || lines.length === 0) return;\n    const {\n      fontSize = 24,\n      fontFamily = 'Arial',\n      color = '#ffffff',\n      strokeColor = '#000000',\n      strokeWidth = 2,\n      horizontalAlign = 'center', // 'left', 'center', 'right'\n      verticalAlign = 'middle',   // 'top', 'middle', 'bottom'\n      offsetX = 0,\n      offsetY = 0,\n    } = settings;\n\n    ctx.font = `${fontSize}px ${fontFamily}`;\n    ctx.textAlign = 'left';\n    ctx.textBaseline = 'top';\n\n    // Compute top-left of the text block based on alignment\n    let x;\n    if (horizontalAlign === 'left') {\n      x = 0 + offsetX;\n    } else if (horizontalAlign === 'center') {\n      x = (canvasWidth - tSize.width) / 2 + offsetX;\n    } else if (horizontalAlign === 'right') {\n      x = canvasWidth - tSize.width + offsetX;\n    } else {\n      x = (canvasWidth - tSize.width) / 2 + offsetX;\n    }\n\n    let y;\n    if (verticalAlign === 'top') {\n      y = 0 + offsetY;\n    } else if (verticalAlign === 'middle') {\n      y = (canvasHeight - tSize.height) / 2 + offsetY;\n    } else if (verticalAlign === 'bottom') {\n      y = canvasHeight - tSize.height + offsetY;\n    } else {\n      y = (canvasHeight - tSize.height) / 2 + offsetY;\n    }\n\n    ctx.fillStyle = color;\n    for (let i = 0; i < lines.length; i++) {\n      const line = lines[i]\n      const ly = y + i * lineHeight\n      if (strokeWidth > 0) {\n        ctx.strokeStyle = strokeColor\n        ctx.lineWidth = strokeWidth\n        ctx.strokeText(line, x, ly)\n      }\n      ctx.fillText(line, x, ly)\n    }\n  }\n\n  // Wrap text into multiple lines based on canvas width\n  const wrapCanvasText = (ctx, textContent, maxWidth) => {\n    if (!textContent) return []\n    const wordsByPara = textContent.split('\\n').map(p => p.split(/\\s+/))\n    const lines = []\n    for (const words of wordsByPara) {\n      let line = ''\n      for (const word of words) {\n        const test = line ? `${line} ${word}` : word\n        const w = ctx.measureText(test).width\n        if (w <= maxWidth || !line) {\n          line = test\n        } else {\n          lines.push(line)\n          line = word\n        }\n      }\n      if (line) lines.push(line)\n    }\n    return lines\n  }\n\n  return (\n    <div className=\"w-full flex flex-col items-center\">\n      <div className=\"relative border border-gray-300 rounded-lg overflow-hidden bg-gray-100\"\n        style={{ width: canvasSize.width, height: canvasSize.height }}\n      >\n        <canvas\n          ref={canvasRef}\n          width={canvasSize.width}\n          height={canvasSize.height}\n          className=\"block mx-auto\"\n          style={{ maxWidth: '100%', height: 'auto' }}\n        />\n        {!imageLoaded && (\n          <div className=\"absolute inset-0 flex items-center justify-center text-gray-400 text-lg bg-white bg-opacity-80\">\n            Loading image...\n          </div>\n        )}\n      </div>\n    </div>\n  )\n}","import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Textarea({\n  className,\n  ...props\n}) {\n  return (\n    <textarea\n      data-slot=\"textarea\"\n      className={cn(\n        \"border-input placeholder:text-muted-foreground focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 flex field-sizing-content min-h-16 w-full rounded-md border bg-transparent px-3 py-2 text-base shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      {...props} />\n  );\n}\n\nexport { Textarea }\n","\"use client\"\n\nimport * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { CircleIcon } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction RadioGroup({\n  className,\n  ...props\n}) {\n  return (\n    <RadioGroupPrimitive.Root\n      data-slot=\"radio-group\"\n      className={cn(\"grid gap-3\", className)}\n      {...props} />\n  );\n}\n\nfunction RadioGroupItem({\n  className,\n  ...props\n}) {\n  return (\n    <RadioGroupPrimitive.Item\n      data-slot=\"radio-group-item\"\n      className={cn(\n        \"border-input text-primary focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 aspect-square size-4 shrink-0 rounded-full border shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}>\n      <RadioGroupPrimitive.Indicator\n        data-slot=\"radio-group-indicator\"\n        className=\"relative flex items-center justify-center\">\n        <CircleIcon\n          className=\"fill-primary absolute top-1/2 left-1/2 size-2 -translate-x-1/2 -translate-y-1/2\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  );\n}\n\nexport { RadioGroup, RadioGroupItem }\n","import React from 'react'\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card.jsx'\nimport { Input } from '@/components/ui/input.jsx'\nimport { Label } from '@/components/ui/label.jsx'\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select.jsx'\nimport { Textarea } from '@/components/ui/textarea.jsx'\nimport { Button } from '@/components/ui/button.jsx' // Assuming Button is used for presets\nimport { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group.jsx' // Assuming these exist\nimport { Settings } from 'lucide-react'\n\nexport default function TextSettingsPanel({ canvasSize, textSettings, onSettingChange, showAnimationDropdown }) {\n  const settings = textSettings || {}\n\n  // Clamp helper\n  const clamp = (val, min, max) => Math.max(min, Math.min(max, val));\n\n  const handleSettingChange = (key, value) => {\n    // For fontSize and strokeWidth, always store as number, clamp, and prevent NaN\n    if (key === 'fontSize') {\n      // Allow empty string for input field, but convert to number for processing\n      if (value === '') {\n        onSettingChange(key, ''); // Allow empty for input field\n        return;\n      }\n      const numValue = Number(value);\n      if (isNaN(numValue)) return; // Don't update on invalid\n      value = clamp(numValue, 8, 150);\n    }\n    if (key === 'strokeWidth') {\n      // Allow empty string for input field, but convert to number for processing\n      if (value === '') {\n        onSettingChange(key, ''); // Allow empty for input field\n        return;\n      }\n      const numValue = Number(value);\n      if (isNaN(numValue)) return; // Don't update on invalid\n      value = clamp(numValue, 0, 5);\n    }\n    onSettingChange(key, value);\n  }\n\n  return (\n    <>\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Settings className=\"h-5 w-5\" />\n            Text Settings\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          {/* Custom Font Upload */}\n          <div className=\"bg-white/60 backdrop-blur-sm rounded-xl p-5 border border-white/20\">\n            <label htmlFor=\"custom-font\" className=\"block font-semibold mb-3 text-gray-800 text-base\">\n              Custom Font (TTF/OTF)\n            </label>\n            <input\n              id=\"custom-font\"\n              type=\"file\"\n              accept=\".ttf,.otf\"\n              onChange={(e) => {\n                const file = e.target.files && e.target.files[0] ? e.target.files[0] : null\n                onSettingChange('customFontFile', file)\n              }}\n              className=\"w-full bg-white/90 backdrop-blur-sm rounded-lg px-3 py-2 text-base border border-gray-300\"\n            />\n            <p className=\"text-xs text-gray-600 mt-3 leading-relaxed\">\n              Upload a .ttf or .otf font file to use for this text. If provided, it will override the selected font family.\n            </p>\n          </div>\n          {/* Max Text Width */}\n          <div className=\"bg-white/60 backdrop-blur-sm rounded-xl p-5 border border-white/20\">\n            <label htmlFor=\"max-width\" className=\"block font-semibold mb-3 text-gray-800 text-base\">\n              Max Text Width\n              <span className=\"text-sm text-gray-500 ml-2 font-normal\">(percentage of image width)</span>\n            </label>\n            <div className=\"flex items-center gap-4\">\n              <div className=\"flex-1 relative\">\n                <input\n                  id=\"max-width\"\n                  type=\"range\"\n                  min=\"40\"\n                  max=\"100\"\n                  value={Math.round((settings.maxWidthRatio ?? 0.95) * 100)}\n                  onChange={(e) => onSettingChange('maxWidthRatio', Number(e.target.value) / 100)}\n                  className=\"w-full h-3 bg-gradient-to-r from-indigo-200 via-blue-200 to-cyan-200 rounded-full appearance-none cursor-pointer slider-thumb-indigo\"\n                />\n                <div className=\"absolute -top-6 left-0 right-0 flex justify-between text-xs text-gray-500\">\n                  <span className=\"font-medium\">40%</span>\n                  <span className=\"font-medium\">100%</span>\n                </div>\n              </div>\n              <div className=\"relative\">\n                <input\n                  type=\"number\"\n                  min=\"40\"\n                  max=\"100\"\n                  value={Math.round((settings.maxWidthRatio ?? 0.95) * 100)}\n                  onChange={(e) => {\n                    const v = Math.max(40, Math.min(100, Number(e.target.value) || 95));\n                    onSettingChange('maxWidthRatio', v / 100)\n                  }}\n                  className=\"w-20 bg-white/90 backdrop-blur-sm rounded-lg px-3 py-2 text-center font-semibold text-base shadow-sm focus:ring-2 focus:ring-indigo-500 focus:outline-none border border-white/30\"\n                />\n                <div className=\"absolute -bottom-5 left-1/2 transform -translate-x-1/2 text-xs text-gray-500 font-medium\">%</div>\n              </div>\n            </div>\n            <p className=\"text-xs text-gray-600 mt-3 leading-relaxed\">\n              Controls the maximum width used for wrapping long text. Decrease if you want narrower captions.\n            </p>\n          </div>\n\n          {/* Line Height */}\n          <div className=\"bg-white/60 backdrop-blur-sm rounded-xl p-5 border border-white/20\">\n            <label htmlFor=\"line-height\" className=\"block font-semibold mb-3 text-gray-800 text-base\">\n              Line Height\n              <span className=\"text-sm text-gray-500 ml-2 font-normal\">(multiplier)</span>\n            </label>\n            <div className=\"flex items-center gap-4\">\n              <div className=\"flex-1 relative\">\n                <input\n                  id=\"line-height\"\n                  type=\"range\"\n                  min=\"1.0\"\n                  max=\"2.0\"\n                  step=\"0.05\"\n                  value={settings.lineHeight ?? 1.2}\n                  onChange={(e) => onSettingChange('lineHeight', Number(e.target.value))}\n                  className=\"w-full h-3 bg-gradient-to-r from-gray-200 via-amber-200 to-orange-200 rounded-full appearance-none cursor-pointer slider-thumb-amber\"\n                />\n                <div className=\"absolute -top-6 left-0 right-0 flex justify-between text-xs text-gray-500\">\n                  <span className=\"font-medium\">1.0</span>\n                  <span className=\"font-medium\">2.0</span>\n                </div>\n              </div>\n              <div className=\"relative\">\n                <input\n                  type=\"number\"\n                  min=\"1\"\n                  max=\"2\"\n                  step=\"0.05\"\n                  value={settings.lineHeight ?? 1.2}\n                  onChange={(e) => onSettingChange('lineHeight', Number(e.target.value) || 1.2)}\n                  className=\"w-20 bg-white/90 backdrop-blur-sm rounded-lg px-3 py-2 text-center font-semibold text-base shadow-sm focus:ring-2 focus:ring-amber-500 focus:outline-none border border-white/30\"\n                />\n              </div>\n            </div>\n            <p className=\"text-xs text-gray-600 mt-3 leading-relaxed\">\n              Controls spacing between lines of wrapped text.\n            </p>\n          </div>\n\n          {/* Auto Fit */}\n          <div className=\"flex items-center gap-3\">\n            <input\n              id=\"auto-fit\"\n              type=\"checkbox\"\n              checked={settings.autoFit ?? true}\n              onChange={(e) => onSettingChange('autoFit', e.target.checked)}\n            />\n            <Label htmlFor=\"auto-fit\">Auto-reduce font size to fit height</Label>\n          </div>\n          <div>\n          {showAnimationDropdown && (\n            <div>\n              <Label htmlFor=\"animation-style\">Text Animation</Label>\n              <Select\n                id=\"animation-style\"\n                value={settings.animationStyle || 'none'}\n                onValueChange={value => handleSettingChange('animationStyle', value)}\n              >\n                <SelectTrigger>\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"none\">None</SelectItem>\n                  <SelectItem value=\"fade\">Fade In/Out</SelectItem>\n                  <SelectItem value=\"slide_up\">Slide Up</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          )}\n            <Label htmlFor=\"text-content\">Text Content</Label>\n            <Textarea\n              id=\"text-content\"\n              value={settings.text}\n              onChange={(e) => handleSettingChange('text', e.target.value)}\n              placeholder=\"Enter your text here...\"\n              rows={3}\n            />\n          </div>\n\n          <div>\n            <Label htmlFor=\"font-family\">Font Family</Label>\n            <Select value={settings.fontFamily} onValueChange={(value) => handleSettingChange('fontFamily', value)}>\n              <SelectTrigger>\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"Arial\">Arial</SelectItem>\n                <SelectItem value=\"Helvetica\">Helvetica</SelectItem>\n                <SelectItem value=\"Times New Roman\">Times New Roman</SelectItem>\n                <SelectItem value=\"Courier New\">Courier New</SelectItem>\n                <SelectItem value=\"Verdana\">Verdana</SelectItem>\n                <SelectItem value=\"Georgia\">Georgia</SelectItem>\n                <SelectItem value=\"Comic Sans MS\">Comic Sans MS</SelectItem>\n                <SelectItem value=\"Impact\">Impact</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n\n          <div className=\"bg-white/60 backdrop-blur-sm rounded-xl p-5 border border-white/20\">\n            <label htmlFor=\"font-size\" className=\"block font-semibold mb-3 text-gray-800 text-base\">\n              Font Size\n              <span className=\"text-sm text-gray-500 ml-2 font-normal\">(pixels)</span>\n            </label>\n            <div className=\"flex items-center gap-4\">\n              <div className=\"flex-1 relative\">\n                <input\n                  id=\"font-size\"\n                  type=\"range\"\n                  min=\"8\"\n                  max=\"150\"\n                  value={settings.fontSize}\n                  onChange={(e) => handleSettingChange('fontSize', e.target.value)}\n                  className=\"w-full h-3 bg-gradient-to-r from-blue-200 via-purple-200 to-pink-200 rounded-full appearance-none cursor-pointer slider-thumb-blue\"\n                />\n                <div className=\"absolute -top-6 left-0 right-0 flex justify-between text-xs text-gray-500\">\n                  <span className=\"font-medium\">Small</span>\n                  <span className=\"font-medium\">Large</span>\n                </div>\n              </div>\n              <div className=\"relative\">\n                <input\n                  type=\"number\"\n                  value={settings.fontSize || ''}\n                  onChange={(e) => {\n                    const val = e.target.value;\n                    handleSettingChange('fontSize', val);\n                  }}\n                  min=\"8\"\n                  max=\"150\"\n                  className=\"w-20 bg-white/90 backdrop-blur-sm rounded-lg px-3 py-2 text-center font-semibold text-base shadow-sm focus:ring-2 focus:ring-blue-500 focus:outline-none border border-white/30\"\n                />\n                <div className=\"absolute -bottom-5 left-1/2 transform -translate-x-1/2 text-xs text-gray-500 font-medium\">px</div>\n              </div>\n            </div>\n            <p className=\"text-xs text-gray-600 mt-3 leading-relaxed\">\n              Controls text size. Larger text is more prominent but may cover more of your GIF.\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div>\n              <Label htmlFor=\"font-color\">Text Color</Label>\n              <div className=\"flex gap-2 mt-1\">\n                <input\n                  type=\"color\"\n                  id=\"font-color\"\n                  value={settings.color} // Use 'color' from textSettings\n                  onChange={(e) => handleSettingChange('color', e.target.value)}\n                  className=\"w-12 h-8 rounded border\"\n                />\n                <Input\n                  type=\"text\"\n                  value={settings.color} // Use 'color' from textSettings\n                  onChange={(e) => handleSettingChange('color', e.target.value)}\n                  placeholder=\"#ffffff\"\n                />\n              </div>\n            </div>\n            <div>\n              <Label htmlFor=\"stroke-color\">Stroke Color</Label>\n              <div className=\"flex gap-2 mt-1\">\n                <input\n                  type=\"color\"\n                  id=\"stroke-color\"\n                  value={settings.strokeColor}\n                  onChange={(e) => handleSettingChange('strokeColor', e.target.value)}\n                  className=\"w-12 h-8 rounded border\"\n                />\n                <Input\n                  type=\"text\"\n                  value={settings.strokeColor}\n                  onChange={(e) => handleSettingChange('strokeColor', e.target.value)}\n                  placeholder=\"#000000\"\n                />\n              </div>\n            </div>\n          </div>\n\n          <div className=\"bg-white/60 backdrop-blur-sm rounded-xl p-5 border border-white/20\">\n            <label htmlFor=\"stroke-width\" className=\"block font-semibold mb-3 text-gray-800 text-base\">\n              Stroke Width\n              <span className=\"text-sm text-gray-500 ml-2 font-normal\">(pixels)</span>\n            </label>\n            <div className=\"flex items-center gap-4\">\n              <div className=\"flex-1 relative\">\n                <input\n                  id=\"stroke-width\"\n                  type=\"range\"\n                  min=\"0\"\n                  max=\"5\"\n                  value={settings.strokeWidth}\n                  onChange={(e) => handleSettingChange('strokeWidth', e.target.value)}\n                  className=\"w-full h-3 bg-gradient-to-r from-green-200 via-blue-200 to-purple-200 rounded-full appearance-none cursor-pointer slider-thumb-green\"\n                />\n                <div className=\"absolute -top-6 left-0 right-0 flex justify-between text-xs text-gray-500\">\n                  <span className=\"font-medium\">None</span>\n                  <span className=\"font-medium\">Thick</span>\n                </div>\n              </div>\n              <div className=\"relative\">\n                <input\n                  type=\"number\"\n                  value={settings.strokeWidth || ''}\n                  onChange={(e) => {\n                    const val = e.target.value;\n                    handleSettingChange('strokeWidth', val);\n                  }}\n                  min=\"0\"\n                  max=\"5\"\n                  className=\"w-20 bg-white/90 backdrop-blur-sm rounded-lg px-3 py-2 text-center font-semibold text-base shadow-sm focus:ring-2 focus:ring-green-500 focus:outline-none border border-white/30\"\n                />\n                <div className=\"absolute -bottom-5 left-1/2 transform -translate-x-1/2 text-xs text-gray-500 font-medium\">px</div>\n              </div>\n            </div>\n            <p className=\"text-xs text-gray-600 mt-3 leading-relaxed\">\n              Adds outline to text for better visibility. 0 = no stroke, higher values = thicker outline.\n            </p>\n          </div>\n\n          {/* Horizontal Alignment */}\n          <div>\n            <Label>Horizontal Alignment</Label>\n            <RadioGroup\n              value={settings.horizontalAlign}\n              onValueChange={(value) => handleSettingChange('horizontalAlign', value)}\n              className=\"flex space-x-4 mt-2\"\n            >\n              <div className=\"flex items-center space-x-2\">\n                <RadioGroupItem value=\"left\" id=\"h-left\" />\n                <Label htmlFor=\"h-left\">Left</Label>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <RadioGroupItem value=\"center\" id=\"h-center\" />\n                <Label htmlFor=\"h-center\">Center</Label>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <RadioGroupItem value=\"right\" id=\"h-right\" />\n                <Label htmlFor=\"h-right\">Right</Label>\n              </div>\n            </RadioGroup>\n          </div>\n\n          {/* Vertical Alignment */}\n          <div>\n            <Label>Vertical Alignment</Label>\n            <RadioGroup\n              value={settings.verticalAlign}\n              onValueChange={(value) => handleSettingChange('verticalAlign', value)}\n              className=\"flex space-x-4 mt-2\"\n            >\n              <div className=\"flex items-center space-x-2\">\n                <RadioGroupItem value=\"top\" id=\"v-top\" />\n                <Label htmlFor=\"v-top\">Top</Label>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <RadioGroupItem value=\"middle\" id=\"v-middle\" />\n                <Label htmlFor=\"v-middle\">Middle</Label>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <RadioGroupItem value=\"bottom\" id=\"v-bottom\" />\n                <Label htmlFor=\"v-bottom\">Bottom</Label>\n              </div>\n            </RadioGroup>\n          </div>\n\n          {/* Offset Inputs */}\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div>\n              <Label htmlFor=\"offset-x\">Offset X (px)</Label>\n              <Input\n                id=\"offset-x\"\n                type=\"number\"\n                value={settings.offsetX}\n                onChange={(e) => handleSettingChange('offsetX', parseInt(e.target.value) || 0)}\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"offset-y\">Offset Y (px)</Label>\n              <Input\n                id=\"offset-y\"\n                type=\"number\"\n                value={settings.offsetY}\n                onChange={(e) => handleSettingChange('offsetY', parseInt(e.target.value) || 0)}\n              />\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Quick Presets */}\n      <Card className=\"mt-6\">\n        <CardHeader>\n          <CardTitle>Text Presets</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-2\">\n          <Button\n            variant=\"outline\"\n            size=\"sm\" \n            className=\"w-full justify-start\"\n            onClick={() => {\n              handleSettingChange('fontFamily', 'Impact')\n              handleSettingChange('fontSize', 36)\n              handleSettingChange('color', '#ffffff')\n              handleSettingChange('strokeColor', '#000000')\n              handleSettingChange('strokeWidth', 3)\n              handleSettingChange('horizontalAlign', 'center')\n              handleSettingChange('verticalAlign', 'middle')\n              handleSettingChange('offsetX', 0)\n              handleSettingChange('offsetY', 0)\n            }}\n          >\n            Meme Style\n          </Button>\n          <Button\n            variant=\"outline\"\n            size=\"sm\" \n            className=\"w-full justify-start\"\n            onClick={() => {\n              handleSettingChange('fontFamily', 'Arial')\n              handleSettingChange('fontSize', 18)\n              handleSettingChange('color', '#000000')\n              handleSettingChange('strokeColor', '#ffffff')\n              handleSettingChange('strokeWidth', 1)\n              handleSettingChange('horizontalAlign', 'left')\n              handleSettingChange('verticalAlign', 'top')\n              handleSettingChange('offsetX', 10)\n              handleSettingChange('offsetY', 10)\n            }}\n          >\n            Subtitle Style\n          </Button>\n          <Button\n            variant=\"outline\"\n            size=\"sm\" \n            className=\"w-full justify-start\"\n            onClick={() => {\n              handleSettingChange('fontFamily', 'Georgia')\n              handleSettingChange('fontSize', 24)\n              handleSettingChange('color', '#333333')\n              handleSettingChange('strokeColor', '#ffffff')\n              handleSettingChange('strokeWidth', 0)\n              handleSettingChange('horizontalAlign', 'center')\n              handleSettingChange('verticalAlign', 'bottom')\n              handleSettingChange('offsetX', 0)\n              handleSettingChange('offsetY', -20)\n            }}\n          >\n            Clean Text\n          </Button>\n        </CardContent>\n      </Card>\n\n      {/* Enhanced Tips Section */}\n      <div className=\"mt-8 bg-gradient-to-br from-blue-50/80 to-indigo-50/80 backdrop-blur-sm rounded-2xl p-6\">\n        <h4 className=\"font-bold text-gray-800 mb-4 flex items-center gap-3\">\n          <span className=\"text-2xl\">💡</span>\n          Pro Tips for Perfect Text\n        </h4>\n\n        <ul className=\"space-y-3 text-sm text-gray-700\">\n          <li className=\"flex items-start gap-3\">\n            <span className=\"w-2 h-2 bg-blue-500 rounded-full mt-2 flex-shrink-0\"></span>\n            <div><strong>Font Size</strong> 18-36px works well for most text. Larger for headlines, smaller for captions.</div>\n          </li>\n          <li className=\"flex items-start gap-3\">\n            <span className=\"w-2 h-2 bg-green-500 rounded-full mt-2 flex-shrink-0\"></span>\n            <div><strong>Stroke Width</strong> 1-3px provides good contrast. Use white stroke on dark backgrounds.</div>\n          </li>\n          <li className=\"flex items-start gap-3\">\n            <span className=\"w-2 h-2 bg-purple-500 rounded-full mt-2 flex-shrink-0\"></span>\n            <div><strong>Positioning</strong> Use alignment and offsets to place text where it won't interfere with the main action.</div>\n          </li>\n          <li className=\"flex items-start gap-3\">\n            <span className=\"w-2 h-2 bg-orange-500 rounded-full mt-2 flex-shrink-0\"></span>\n            <div><strong>Contrast</strong> Choose colors that stand out against your GIF background for maximum readability.</div>\n          </li>\n          <li className=\"flex items-start gap-3\">\n            <span className=\"w-2 h-2 bg-red-500 rounded-full mt-2 flex-shrink-0\"></span>\n            <div><strong>Length</strong> Keep text concise and readable. Short phrases work better than long sentences.</div>\n          </li>\n          <li className=\"flex items-start gap-3\">\n            <span className=\"w-2 h-2 bg-gradient-to-r from-blue-500 to-purple-500 rounded-full mt-2 flex-shrink-0\"></span>\n            <div><strong>Preview</strong> Use the preview to see how your text looks before finalizing. Make adjustments as needed!</div>\n          </li>\n        </ul>\n      </div>\n    </>\n  )\n}\n","import React, { useState, useCallback, useRef } from 'react'\nimport DisplayAd from '@/components/ads/DisplayAd.jsx';\nimport InArticleAd from '@/components/ads/InArticleAd.jsx';\nimport * as Slider from '@radix-ui/react-slider'\nimport { Helmet } from 'react-helmet-async'\nimport { Button } from '@/components/ui/button.jsx'\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card.jsx'\nimport { Type, Settings } from 'lucide-react'\nimport InteractiveCanvas from '../components/InteractiveCanvas'\nimport ResultSection from '../components/ResultSection'\nimport TextSettingsPanel from '../components/TextSettingsPanel'\nimport FileUploadSection from '../components/FileUploadSection'\nimport SocialSharingSection from '../components/SocialSharingSection'\nimport TroubleshootingSection from '../components/TroubleshootingSection'\nimport TipsFaqsBestPracticesSection from '../components/TipsFaqsBestPracticesSection'\nimport ToolSeoSection from '../components/ToolSeoSection'\nimport HowToUseSection from '../components/HowToUseSection'\nimport ProcessingState from '../components/ProcessingState'\nimport UploadState from '../components/UploadState'\nimport ToolPageLayout from '../components/ToolPageLayout'\n          {/* Bottom Ad - Before value content */}\n          <div className=\"my-8 flex justify-center\">\n            <DisplayAd \n              slot=\"1125232950\"\n              className=\"max-w-3xl w-full\"\n            />\n          </div>\nimport ValueContentSection from '../components/ValueContentSection'\nimport AdsenseAd from '../components/AdsenseAd'\n\nexport default function AddTextTool() {\n  const apiBase = import.meta.env.VITE_API_URL || 'http://localhost:5001'\n  const [workflowState, setWorkflowState] = useState('upload') // 'upload', 'editing', 'processing', 'result'\n  const [uploadMethod, setUploadMethod] = useState('file')\n  const [sourceFile, setSourceFile] = useState(null) // To hold the original file\n  const [mediaUrl, setMediaUrl] = useState(null)\n  const [isProcessing, setIsProcessing] = useState(false)\n  const [resultUrl, setResultUrl] = useState(null)\n  const [errorMessage, setErrorMessage] = useState(null)\n  const [canvasDimensions, setCanvasDimensions] = useState({ width: 800, height: 600 })\n  // Text settings state\n  const [textSettings, setTextSettings] = useState({\n    text: 'Sample Text',\n    fontSize: 24,\n    fontFamily: 'Arial',\n    color: '#ffffff',\n    strokeColor: '#000000',\n    strokeWidth: 2,\n    horizontalAlign: 'center',\n    verticalAlign: 'middle',\n    offsetX: 0,\n    offsetY: 0,\n    x: 0,\n    y: 0,\n    animationStyle: 'none',\n    // advanced layout defaults\n    maxWidthRatio: 0.95,\n    lineHeight: 1.2,\n    autoFit: true,\n  })\n  // Start and end time state (in seconds)\n  const [startTime, setStartTime] = useState(0)\n  const [endTime, setEndTime] = useState('')\n  // Multiple text layers support\n  const [layers, setLayers] = useState([]) // each item mirrors textSettings + per-layer timing\n  const [selectedLayerIndex, setSelectedLayerIndex] = useState(-1)\n  // GIF metadata\n  const [gifDuration, setGifDuration] = useState(10) // fallback default\n  const [gifFrameCount, setGifFrameCount] = useState(1)\n  const [durationWarning, setDurationWarning] = useState(false)\n  const imageRef = useRef(null)\n\n  // Handle text settings change from TextSettingsPanel\n  const handleSettingChange = useCallback((key, value) => {\n    setTextSettings(prev => {\n      const updated = { ...prev, [key]: value }\n      // If a layer is selected, keep it in sync\n      if (selectedLayerIndex >= 0) {\n        setLayers(curr => curr.map((layer, idx) => idx === selectedLayerIndex ? { ...layer, [key]: value } : layer))\n      }\n      return updated\n    })\n  }, [])\n\n  // Unified upload handler for file or URL\n  const handleFileUpload = useCallback((files, urlInput = null) => {\n    if ((!files || files.length === 0) && !urlInput) return\n    setErrorMessage(null)\n    setResultUrl(null)\n    let url\n    let fileObj = null\n    let isUrl = false\n    if (uploadMethod === 'url' && urlInput) { // URL upload\n      url = urlInput\n      setSourceFile(null)\n      isUrl = true\n    } else { // File upload\n      fileObj = files[0]\n      setSourceFile(fileObj)\n      url = URL.createObjectURL(fileObj)\n    }\n    setMediaUrl(url)\n    setWorkflowState('editing')\n\n    // Fetch real GIF metadata from backend\n    const apiUrl = import.meta.env.VITE_API_URL || 'http://localhost:5001'\n    const formData = new FormData()\n    if (isUrl) {\n      formData.append('url', url)\n    } else {\n      formData.append('file', fileObj, fileObj?.name)\n    }\n    fetch(`${apiUrl}/api/gif-metadata`, {\n      method: 'POST',\n      body: formData\n    })\n      .then(res => res.json())\n      .then(data => {\n        if (data.duration && data.frame_count) {\n          setGifFrameCount(data.frame_count)\n          setGifDuration(data.duration)\n          setDurationWarning(false)\n          setStartTime(0)\n          setEndTime(data.duration.toFixed(2))\n        } else {\n          setGifFrameCount(1)\n          setGifDuration(10)\n          setDurationWarning(true)\n        }\n      })\n      .catch(() => {\n        setGifFrameCount(1)\n        setGifDuration(10)\n        setDurationWarning(true)\n      })\n  }, [uploadMethod])\n\n  // Handle text position change from InteractiveCanvas\n  const handleTextPositionChange = useCallback((position) => {\n    setTextSettings(prev => ({\n      ...prev,\n      x: position.x,\n      y: position.y\n    }))\n    if (selectedLayerIndex >= 0) {\n      setLayers(curr => curr.map((layer, idx) => idx === selectedLayerIndex ? { ...layer, x: position.x, y: position.y } : layer))\n    }\n  }, [])\n\n  // Reset workflow to upload state\n  const resetWorkflow = () => {\n    setWorkflowState('upload')\n    setSourceFile(null)\n    setMediaUrl(null)\n    setErrorMessage(null)\n    setResultUrl(null)\n    setTextSettings(prev => ({\n      ...prev,\n      text: 'Sample Text',\n      fontSize: 24,\n      fontFamily: 'Arial',\n      color: '#ffffff',\n      strokeColor: '#000000',\n      strokeWidth: 2,\n      horizontalAlign: 'center',\n      verticalAlign: 'middle',\n      offsetX: 0,\n      offsetY: 0,\n      x: 0,\n      y: 0,\n      maxWidthRatio: 0.95,\n      lineHeight: 1.2,\n      autoFit: true,\n    }))\n    setStartTime(0)\n    setEndTime('')\n    setLayers([])\n    setSelectedLayerIndex(-1)\n  }\n\n  // Handle final process (API call)\n  const handleFinalProcess = async () => {\n    if (!mediaUrl) return\n    setIsProcessing(true)\n    setErrorMessage(null)\n    setWorkflowState('processing')\n    try {\n      const formData = new FormData()\n      if (uploadMethod === 'url') {\n        formData.append('url', mediaUrl)\n      } else {\n        formData.append('file', sourceFile, sourceFile.name)\n      }\n      // Build layers payload (use existing layers or a single ephemeral layer)\n      const preparedLayers = (layers.length > 0 ? layers : [{ ...textSettings, startTime, endTime }]).map((l, idx) => {\n        const entry = {\n          text: l.text || '',\n          font_family: l.fontFamily || 'Arial',\n          font_size: Number(l.fontSize || 24),\n          color: l.color || '#ffffff',\n          stroke_color: l.strokeColor || '#000000',\n          stroke_width: Number(l.strokeWidth || 0),\n          horizontal_align: l.horizontalAlign || 'center',\n          vertical_align: l.verticalAlign || 'middle',\n          offset_x: Number(l.offsetX || 0),\n          offset_y: Number(l.offsetY || 0),\n          start_time: (l.startTime !== undefined ? l.startTime : startTime) ?? 0,\n          end_time: (l.endTime !== undefined ? l.endTime : endTime) ?? '',\n          animation_style: l.animationStyle || 'none',\n          max_width_ratio: (l.maxWidthRatio ?? 0.95),\n          line_height: (l.lineHeight ?? 1.2),\n          auto_fit: (l.autoFit ?? true)\n        }\n        // Attach font file if provided\n        if (l.customFontFile) {\n          const field = `font_${idx}`\n          formData.append(field, l.customFontFile, l.customFontFile.name)\n          entry.font_field = field\n        }\n        return entry\n      })\n      formData.append('layers', JSON.stringify(preparedLayers))\n      const apiUrl = import.meta.env.VITE_API_URL || 'http://localhost:5001'\n      const response = await fetch(`${apiUrl}/api/add-text-layers`, {\n        method: 'POST',\n        body: formData\n      })\n      if (response.ok) {\n        const data = await response.json()\n        const taskId = data.task_id\n        // Poll for task status\n        let state = null\n        let result = null\n        let pollCount = 0\n        while (pollCount < 60) { // up to 60s\n          const statusResp = await fetch(`${apiUrl}/api/task-status/${taskId}`)\n          if (statusResp.ok) {\n            const statusData = await statusResp.json()\n            state = statusData.state\n            result = statusData.result\n            if (state === 'SUCCESS' && result) break\n            if (state === 'FAILURE') throw new Error(statusData.error || 'Processing failed.')\n          }\n          await new Promise(res => setTimeout(res, 1000))\n          pollCount++\n        }\n        if (state === 'SUCCESS' && result) {\n          // Fetch the actual GIF from /api/download/<result>\n          const downloadResp = await fetch(`${apiUrl}/api/download/${result}`)\n          if (!downloadResp.ok) throw new Error('Failed to fetch result GIF.')\n          const gifBlob = await downloadResp.blob()\n          const url = URL.createObjectURL(gifBlob)\n          setResultUrl({\n            previewUrl: url,\n            downloadUrl: `${apiUrl}/api/download/${result}`\n          })\n          setWorkflowState('result')\n        } else {\n          throw new Error('Timed out waiting for processing.')\n        }\n      } else {\n        const errorData = await response.json()\n        setErrorMessage(errorData.error || 'An unknown error occurred during processing.')\n        setWorkflowState('editing')\n      }\n    } catch (error) {\n      setErrorMessage(error.message || 'Network error or unexpected issue.')\n      setWorkflowState('editing')\n    } finally {\n      setIsProcessing(false)\n    }\n  }\n\n  // --- Render ---\n  return (\n    <>\n      <ToolPageLayout\n        title=\"Add Text to GIF\"\n        description=\"Add multiple text layers, captions, and watermarks to GIFs online. Customize fonts (including custom uploads), colors, position, timing, and animations. Free online GIF text editor.\"\n        icon={Type}\n        seoProps={{\n          title: \"Add Text to GIF - Overlay Text on GIFs Online | EasyGIFMaker\",\n          description: \"Add multiple text layers, upload custom fonts, and control per-layer timing and animations. Precise alignment, max-width wrapping, and auto-fit for perfect captions and watermarks.\",\n          keywords: \"add text to gif, multiple text layers gif, custom fonts gif, gif text editor, gif caption, gif watermark, text overlay gif, animated text gif, line height, max width\",\n          canonical: \"https://easygifmaker.com/add-text\"\n        }}\n      >\n        <HowToUseSection\n          title=\"How to Add Text to GIFs\"\n          steps={[\n            {\n              title: \"Upload your GIF\",\n              description: \"Select a GIF file or enter a GIF URL to add text to.\"\n            },\n            {\n              title: \"Customize text properties\",\n              description: \"Set font, size, color, position, and animation effects.\"\n            },\n            {\n              title: \"Position text precisely\",\n              description: \"Use the interactive canvas to position your text perfectly.\"\n            },\n            {\n              title: \"Download your enhanced GIF\",\n              description: \"Get your GIF with professional text overlay!\"\n            }\n          ]}\n        />\n\n  {/* Value content moved to end of page */}\n\n         {/* Upload State */}\n          {workflowState === 'upload' && (\n            <UploadState\n              title=\"Upload GIF\"\n              description=\"Select a GIF file or enter a GIF URL to add text overlay\"\n              errorMessage={errorMessage}\n              uploadMethod={uploadMethod}\n              setUploadMethod={setUploadMethod}\n              onFileSelect={(files) => handleFileUpload(files)}\n              onUrlSubmit={(url) => handleFileUpload(null, url)}\n              isProcessing={isProcessing}\n              supportedFormats=\"Supported formats: GIF only\"\n              accept=\"image/gif\"\n              toolName=\"GIF\"\n            />\n          )}\n\n          {/* Editing State */}\n          {workflowState === 'editing' && (\n            <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n              {/* GIF Preview and Text Editor */}\n              <div className=\"lg:col-span-2\">\n                <Card className=\"bg-gradient-to-br from-white to-blue-50/30 shadow-lg\">\n                  <CardHeader className=\"pb-4\">\n                    <CardTitle className=\"text-2xl font-bold text-gray-800 dark:text-white md:text-xl sm:text-lg\">GIF Preview & Text Editor</CardTitle>\n                    <CardDescription className=\"text-gray-600 dark:text-gray-200\">\n                      Add and customize text overlay on your GIF\n                    </CardDescription>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"bg-gradient-to-br from-gray-50/50 to-blue-50/30 rounded-2xl p-6 mb-6 backdrop-blur-sm\">\n                      <div className=\"text-center\">\n                        <InteractiveCanvas\n                          imageUrl={mediaUrl}\n                          textLayers={(layers && layers.length > 0) ? layers : [{ ...textSettings }]}\n                          onTextPositionChange={handleTextPositionChange}\n                        />\n                      </div>\n                    </div>\n                    {/* Simple Layers Manager */}\n                    <div className=\"mb-6\">\n                      <div className=\"flex items-center justify-between mb-2\">\n                        <span className=\"font-semibold text-gray-800 dark:text-white\">Text Layers</span>\n                        <div className=\"flex gap-2\">\n                          <Button\n                            variant=\"outline\"\n                            onClick={() => {\n                              const newLayer = {\n                                ...textSettings,\n                                startTime,\n                                endTime,\n                              }\n                              setLayers(prev => [...prev, newLayer])\n                              setSelectedLayerIndex(layers.length)\n                            }}\n                          >Add Layer</Button>\n                          {selectedLayerIndex >= 0 && (\n                            <Button\n                              variant=\"destructive\"\n                              onClick={() => {\n                                setLayers(prev => prev.filter((_, i) => i !== selectedLayerIndex))\n                                setSelectedLayerIndex(-1)\n                              }}\n                            >Delete Selected</Button>\n                          )}\n                        </div>\n                      </div>\n                      {layers.length > 0 ? (\n                        <div className=\"flex flex-wrap gap-2\">\n                          {layers.map((l, i) => (\n                            <button\n                              key={i}\n                              className={`px-3 py-1 rounded border ${i === selectedLayerIndex ? 'bg-blue-600 text-white' : 'bg-white text-gray-800'}`}\n                              onClick={() => {\n                                setSelectedLayerIndex(i)\n                                setTextSettings({ ...l })\n                                setStartTime(l.startTime ?? 0)\n                                setEndTime(l.endTime ?? '')\n                              }}\n                            >{(l.text || 'Layer').slice(0, 16) || 'Layer'}{l.text && l.text.length > 16 ? '…' : ''}</button>\n                          ))}\n                        </div>\n                      ) : (\n                        <div className=\"text-sm text-gray-600\">No layers yet. Use \"Add Layer\" to create one from current settings.</div>\n                      )}\n                    </div>\n                    {/* Start/End Time Controls with Slider */}\n                    <div className=\"mb-4\">\n                      <div className=\"mb-2 flex justify-between items-center\">\n                        <span className=\"font-semibold text-gray-800 dark:text-white\">Layer Timing</span>\n                        <span className=\"text-xs text-gray-500 dark:text-gray-300\">GIF duration: {gifDuration.toFixed(2)}s, {gifFrameCount} frames</span>\n                      </div>\n                      <Slider.Root\n                        className=\"relative flex items-center select-none touch-none w-full h-8\"\n                        min={0}\n                        max={gifDuration}\n                        step={0.01}\n                        value={[Number(startTime), Number(endTime) || gifDuration]}\n                        onValueChange={([start, end]) => {\n                          const s = Number(start)\n                          const e = Number(end)\n                          setStartTime(s)\n                          setEndTime(e)\n                          if (selectedLayerIndex >= 0) {\n                            setLayers(curr => curr.map((layer, idx) => idx === selectedLayerIndex ? { ...layer, startTime: s, endTime: e } : layer))\n                          }\n                        }}\n                        minStepsBetweenThumbs={1}\n                        aria-label=\"Text timing range\"\n                      >\n                        <Slider.Track className=\"bg-blue-200 relative grow rounded-full h-2\">\n                          <Slider.Range className=\"absolute bg-blue-500 rounded-full h-2\" />\n                        </Slider.Track>\n                        <Slider.Thumb className=\"block w-5 h-5 bg-blue-600 rounded-full shadow-lg border-2 border-white focus:outline-none\" />\n                        <Slider.Thumb className=\"block w-5 h-5 bg-purple-600 rounded-full shadow-lg border-2 border-white focus:outline-none\" />\n                      </Slider.Root>\n                      <div className=\"flex gap-4 mt-2\">\n                        <div className=\"flex-1\">\n                          <label htmlFor=\"start-time\" className=\"block font-semibold mb-1 text-gray-800 dark:text-white\">Start Time (seconds)</label>\n                          <input\n                            id=\"start-time\"\n                            type=\"number\"\n                            min=\"0\"\n                            max={Number(endTime) || gifDuration}\n                            value={startTime}\n                            onChange={e => setStartTime(Math.max(0, Math.min(Number(e.target.value), Number(endTime) || gifDuration)))}\n                            className=\"w-full bg-white/90 rounded-lg px-3 py-2 text-base border border-gray-300\"\n                            placeholder=\"0\"\n                          />\n                        </div>\n                        <div className=\"flex-1\">\n                          <label htmlFor=\"end-time\" className=\"block font-semibold mb-1 text-gray-800 dark:text-white\">End Time (seconds, optional)</label>\n                          <input\n                            id=\"end-time\"\n                            type=\"number\"\n                            min={startTime}\n                            max={gifDuration}\n                            value={endTime}\n                            onChange={e => {\n                              const val = Math.max(Number(startTime), Math.min(Number(e.target.value), gifDuration))\n                              setEndTime(val)\n                              if (selectedLayerIndex >= 0) {\n                                setLayers(curr => curr.map((layer, idx) => idx === selectedLayerIndex ? { ...layer, endTime: val } : layer))\n                              }\n                            }}\n                            className=\"w-full bg-white/90 rounded-lg px-3 py-2 text-base border border-gray-300\"\n                            placeholder=\"(leave blank for end of GIF)\"\n                          />\n                        </div>\n                      </div>\n                      {durationWarning && (\n                        <div className=\"text-xs text-red-500 mt-2\">Could not auto-detect GIF duration. Defaulting to 10s. Timing may be inaccurate.</div>\n                      )}\n                    </div>\n                    <div className=\"flex gap-4\">\n                      <Button onClick={resetWorkflow} variant=\"outline\" className=\"flex-1 bg-white/80 backdrop-blur-sm hover:bg-white transition-all duration-300\">\n                        Upload Different GIF\n                      </Button>\n                      <Button \n                        onClick={handleFinalProcess}\n                        disabled={isProcessing || !textSettings.text}\n                        className=\"flex-1 bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 text-white shadow-lg hover:shadow-xl transition-all duration-300 transform hover:scale-105\"\n                      >\n                        {isProcessing ? 'Processing...' : 'Add Text to GIF'}\n                      </Button>\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n              {/* Text Settings Panel */}\n              <div>\n                <Card className=\"bg-gradient-to-br from-white to-indigo-50/30 shadow-lg\">\n                  <CardHeader className=\"pb-4\">\n                    <CardTitle className=\"flex items-center gap-3 text-xl font-bold text-gray-800 dark:text-white\">\n                      <div className=\"p-2 bg-gradient-to-r from-blue-500 to-purple-500 rounded-lg\">\n                        <Type className=\"h-5 w-5 text-white\" />\n                      </div>\n                      Text Settings\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <TextSettingsPanel\n                      textSettings={textSettings}\n                      onSettingChange={handleSettingChange}\n                      showAnimationDropdown={true}\n                    />\n                  </CardContent>\n                </Card>\n              </div>\n            </div>\n          )}\n\n          {/* Processing State */}\n          {workflowState === 'processing' && (\n            <ProcessingState\n              title=\"Processing Your GIF\"\n              description=\"Adding text overlay to your GIF...\"\n            />\n          )}\n\n          {/* Result State */}\n          {workflowState === 'result' && resultUrl && (\n            <ResultSection\n              title=\"Your GIF with Text is Ready!\"\n              description=\"Your GIF has been successfully updated with text overlay.\"\n              imageUrl={resultUrl.previewUrl}\n              downloadFileName=\"gif-with-text.gif\"\n              downloadUrl={resultUrl.downloadUrl}\n              onReset={resetWorkflow}\n            />\n          )}\n\n        <ToolSeoSection\n          icon={Type}\n          title=\"Add Text to GIF\"\n          description1=\"Transform your GIFs with layered text overlays. Add multiple captions, watermarks, and callouts with per-layer timing and animation.\"\n          description2=\"Customize fonts (including uploads), colors, sizes, alignment, and wrapping. Fine-tune line height, max text width, and auto-fit for crisp, readable captions.\"\n          features1={[\n            { emoji: \"🧩\", text: \"Multiple text layers with per-layer settings\" },\n            { emoji: \"🔤\", text: \"Custom fonts (.ttf/.otf) per layer\" },\n            { emoji: \"🎞️\", text: \"Per-layer timing and simple animations\" }\n          ]}\n          features2={[\n            { emoji: \"📐\", text: \"Max width wrapping, line height, and auto-fit\" },\n            { emoji: \"⚡\", text: \"Real-time preview and editing\" },\n            { emoji: \"💎\", text: \"High-quality output preservation\" }\n          ]}\n          useCases={[\n            { color: \"bg-yellow-400\", text: \"Add captions and subtitles to GIFs\" },\n            { color: \"bg-green-400\", text: \"Create branded watermarks with custom fonts\" },\n            { color: \"bg-blue-400\", text: \"Add funny text and memes to GIFs\" },\n            { color: \"bg-purple-400\", text: \"Create promotional content with layered callouts\" }\n          ]}\n        />\n        <AdsenseAd adSlot=\"8336674411\" adFormat=\"fluid\" adLayout=\"in-article\" />\n          \n        <TipsFaqsBestPracticesSection \n          proTips={[\n            {\n              color: \"bg-blue-500\",\n              text: \"Use Max Text Width and Line Height for readable multi-line captions. Keep Auto-Fit on for smaller GIFs.\"\n            },\n            {\n              color: \"bg-green-500\",\n              text: \"Prefer short, punchy lines. Multiple short layers often read better than one long paragraph.\"\n            },\n            {\n              color: \"bg-purple-500\",\n              text: \"Use alignment + offsets to avoid busy regions. Center alignment works well for captions.\"\n            },\n            {\n              color: \"bg-orange-500\",\n              text: \"Stagger layer timing for storytelling. Simple animations (fade/slide) add polish without distraction.\"\n            }\n          ]}\n          faqs={[\n            {\n              question: \"What text formats are supported?\",\n              answer: \"All standard text characters, emojis, and special characters.\"\n            },\n            {\n              question: \"Can I add multiple text elements?\",\n              answer: \"Yes. Add multiple text layers, each with its own font, styling, position, timing, and animation.\"\n            },\n            {\n              question: \"Can I upload custom fonts?\",\n              answer: \"Yes. Upload .ttf or .otf for a layer. If a font can’t be loaded, we’ll fall back to a safe font to keep text legible.\"\n            },\n            {\n              question: \"Will the text quality be preserved?\",\n              answer: \"Yes, we maintain high quality while adding text overlay.\"\n            },\n            {\n              question: \"Is there a text length limit?\",\n              answer: \"No hard limit. For readability, keep lines short and use wrapping with Max Text Width and Line Height.\"\n            },\n            {\n              question: \"Why isn’t my layer visible?\",\n              answer: \"Check timing (start/end), color contrast, and alignment/offsets. Also ensure the animation isn’t mid-fade at that moment.\"\n            }\n          ]}\n          relatedResources={[\n            {\n              href: \"/blog/add-text-to-gifs-guide\",\n              icon: \"📝\",\n              text: \"Adding Text to GIFs Guide\"\n            },\n            {\n              href: \"/blog/top-5-gif-optimization-tips\",\n              icon: \"⚡\",\n              text: \"Top 5 GIF Optimization Tips\"\n            }\n          ]}\n        />\n\n        <TroubleshootingSection \n          commonIssues={[\n            {\n              color: \"bg-yellow-500\",\n              text: \"If a layer isn’t visible, verify its timing range, color contrast, and alignment/offsets.\"\n            },\n            {\n              color: \"bg-orange-500\",\n              text: \"If upload fails, check your file format (GIF only) and file size. For custom fonts, use .ttf or .otf.\"\n            },\n            {\n              color: \"bg-red-500\",\n              text: \"Still having issues?\",\n              link: \"/contact\"\n            }\n          ]}\n          quickFixes={[\n            {\n              icon: \"🎨\",\n              text: \"Use high contrast colors and a subtle stroke for clarity\"\n            },\n            {\n              icon: \"📏\",\n              text: \"Use Auto-Fit and Max Width to fit within the frame\"\n            },\n            {\n              icon: \"📍\",\n              text: \"Use alignment + offsets to avoid busy areas\"\n            }\n          ]}\n        />\n\n        <SocialSharingSection \n          title=\"Share Your GIF!\"\n          description=\"Share your new GIF with text on Instagram, Twitter, TikTok, Facebook, or embed it in your blog or website. Tag us with #EasyGIFMaker for a chance to be featured!\"\n        />\n\n        {/* Value Content Section (moved to end) */}\n          {/* Bottom Ad - Before value content */}\n          <div className=\"my-8 flex justify-center\">\n            <DisplayAd \n              slot=\"1125232950\"\n              className=\"max-w-3xl w-full\"\n            />\n          </div>\n        <ValueContentSection\n          toolTitle=\"Add Text to GIF\"\n          relatedLinks={[\n            { href: '/blog/master-the-art-of-adding-text-to-gifs', label: 'Master the Art of Adding Text to GIFs' },\n            { href: '/blog/creative-gif-design-tutorial', label: 'Creative GIF Design Tutorial' }\n          ]}\n          altTools={[\n            { href: '/gif-maker', label: 'GIF Maker', desc: 'Create GIFs from images or short clips.' },\n            { href: '/resize', label: 'Resize GIF', desc: 'Make your GIF fit any platform.' },\n            { href: '/optimize', label: 'Optimize GIF', desc: 'Reduce size for faster sharing.' }\n          ]}\n        />\n      </ToolPageLayout>\n    </>\n  )\n}\n"],"names":["InteractiveCanvas","imageUrl","text","textSettings","textLayers","onTextPositionChange","canvasRef","useRef","imageRef","canvasSize","setCanvasSize","useState","width","height","imageLoaded","setImageLoaded","textSize","setTextSize","useEffect","img","Image","onload","current","crossOrigin","src","canvas","ctx","getContext","clearRect","drawImage","Array","isArray","length","forEach","layer","initialFontSize","Number","fontSize","fontFamily","maxWidthRatio","lineHeightMult","lineHeight","autoFit","effectiveFont","font","maxWidth","Math","round","lines","wrapCanvasText","max","blockHeight","blockWidth","reduce","m","l","measureText","guard","floor","tSize","trim","drawSettings","drawText","settings","canvasWidth","canvasHeight","color","strokeColor","strokeWidth","horizontalAlign","verticalAlign","offsetX","offsetY","x","y","textAlign","textBaseline","fillStyle","i","line","ly","strokeStyle","lineWidth","strokeText","fillText","textContent","wordsByPara","split","map","p","words","word","test","push","jsx","className","children","jsxs","style","ref","Textarea","props","cn","RadioGroup","RadioGroupPrimitive.Root","RadioGroupItem","RadioGroupPrimitive.Item","RadioGroupPrimitive.Indicator","CircleIcon","TextSettingsPanel","onSettingChange","showAnimationDropdown","clamp","val","min","handleSettingChange","key","value","numValue","isNaN","Fragment","Card","CardHeader","CardTitle","Settings","CardContent","htmlFor","id","type","accept","onChange","e","file","target","files","v","step","checked","Label","Select","animationStyle","onValueChange","SelectTrigger","SelectValue","SelectContent","SelectItem","placeholder","rows","Input","parseInt","Button","variant","size","onClick","AddTextTool","workflowState","setWorkflowState","uploadMethod","setUploadMethod","sourceFile","setSourceFile","mediaUrl","setMediaUrl","isProcessing","setIsProcessing","resultUrl","setResultUrl","errorMessage","setErrorMessage","canvasDimensions","setCanvasDimensions","setTextSettings","startTime","setStartTime","endTime","setEndTime","layers","setLayers","selectedLayerIndex","setSelectedLayerIndex","gifDuration","setGifDuration","gifFrameCount","setGifFrameCount","durationWarning","setDurationWarning","useCallback","prev","updated","curr","idx","handleFileUpload","urlInput","url","fileObj","isUrl","URL","createObjectURL","formData","FormData","append","name","fetch","method","body","then","res","json","data","duration","frame_count","toFixed","catch","handleTextPositionChange","position","resetWorkflow","ToolPageLayout","title","description","icon","Type","seoProps","keywords","canonical","HowToUseSection","steps","UploadState","onFileSelect","onUrlSubmit","supportedFormats","toolName","CardDescription","newLayer","filter","_","slice","Slider.Root","start","end","s","minStepsBetweenThumbs","Slider.Track","Slider.Range","Slider.Thumb","async","preparedLayers","entry","font_family","font_size","stroke_color","stroke_width","horizontal_align","vertical_align","offset_x","offset_y","start_time","end_time","animation_style","max_width_ratio","line_height","auto_fit","customFontFile","field","font_field","JSON","stringify","apiUrl","response","ok","taskId","task_id","state","result","pollCount","statusResp","statusData","Error","error","Promise","setTimeout","downloadResp","gifBlob","blob","previewUrl","downloadUrl","errorData","message","disabled","ProcessingState","ResultSection","downloadFileName","onReset","ToolSeoSection","description1","description2","features1","emoji","features2","useCases","AdsenseAd","adSlot","adFormat","adLayout","TipsFaqsBestPracticesSection","proTips","faqs","question","answer","relatedResources","href","TroubleshootingSection","commonIssues","link","quickFixes","SocialSharingSection","DisplayAd","slot","ValueContentSection","toolTitle","relatedLinks","label","altTools","desc"],"mappings":"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"}