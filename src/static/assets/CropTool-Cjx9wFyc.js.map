{"version":3,"file":"CropTool-Cjx9wFyc.js","sources":["../../src/components/CropperCanvas.jsx","../../src/tools/CropTool.jsx"],"sourcesContent":["import React, { useState, useCallback } from 'react'\nimport Cropper from 'react-easy-crop'\n\nexport default function CropperCanvas({\n  imageUrl,\n  aspect,\n  crop,\n  zoom,\n  onCropChange,\n  onZoomChange,\n  onCropComplete\n}) {\n  // Ensure crop values are valid numbers\n  const safeCrop = {\n    x: typeof crop.x === 'number' && !isNaN(crop.x) ? crop.x : 0,\n    y: typeof crop.y === 'number' && !isNaN(crop.y) ? crop.y : 0\n  }\n  \n  const safeZoom = typeof zoom === 'number' && !isNaN(zoom) ? zoom : 1\n  \n  return (\n    <div style={{ position: 'relative', width: '100%', height: 400, background: '#222' }}>\n      <Cropper\n        image={imageUrl}\n        crop={safeCrop}\n        zoom={safeZoom}\n        aspect={aspect}\n        onCropChange={onCropChange}\n        onZoomChange={onZoomChange}\n        onCropComplete={onCropComplete}\n        cropShape=\"rect\"\n        showGrid={true}\n        style={{ containerStyle: { borderRadius: 12 } }}\n      />\n    </div>\n  )\n}\n","import React, { useState, useCallback } from 'react'\nimport DisplayAd from '@/components/ads/DisplayAd.jsx';\nimport InArticleAd from '@/components/ads/InArticleAd.jsx';\nimport { Helmet } from 'react-helmet-async'\nimport { Button } from '@/components/ui/button.jsx'\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card.jsx'\nimport { Label } from '@/components/ui/label.jsx'\nimport { Input } from '@/components/ui/input.jsx'\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select.jsx'\nimport { Crop, Settings } from 'lucide-react'\nimport ResultSection from '../components/ResultSection'\nimport FileUploadSection from '../components/FileUploadSection'\nimport CropperCanvas from '../components/CropperCanvas'\nimport SocialSharingSection from '../components/SocialSharingSection'\nimport TroubleshootingSection from '../components/TroubleshootingSection'\nimport TipsFaqsBestPracticesSection from '../components/TipsFaqsBestPracticesSection'\nimport ToolSeoSection from '../components/ToolSeoSection'\nimport HowToUseSection from '../components/HowToUseSection'\nimport EnhancedTipsSection from '../components/EnhancedTipsSection'\n\n          {/* Mid-content Ad */}\n          <div className=\"my-8 flex justify-center\">\n            <InArticleAd \n              slot=\"8336674411\"\n              className=\"max-w-2xl w-full\"\n            />\n          </div>\nimport ProcessingState from '../components/ProcessingState'\nimport UploadState from '../components/UploadState'\nimport ToolPageLayout from '../components/ToolPageLayout'\n          {/* Bottom Ad - Before value content */}\n          <div className=\"my-8 flex justify-center\">\n            <DisplayAd \n              slot=\"1125232950\"\n              className=\"max-w-3xl w-full\"\n            />\n          </div>\nimport ValueContentSection from '../components/ValueContentSection'\nimport AdsenseAd from '../components/AdsenseAd'\n\nexport default function CropTool() {\n  const [workflowState, setWorkflowState] = useState('upload') // 'upload', 'editing', 'processing', 'result'\n  const [uploadMethod, setUploadMethod] = useState('file')\n  const [mediaUrl, setMediaUrl] = useState(null)\n  const [isProcessing, setIsProcessing] = useState(false)\n  const [resultUrl, setResultUrl] = useState(null)\n  const [errorMessage, setErrorMessage] = useState(null)\n  // Cropper state - crop uses percentages (0-1), croppedAreaPixels uses actual pixel values\n  const [crop, setCrop] = useState({ x: 0, y: 0 })\n  const [zoom, setZoom] = useState(1)\n  const [croppedAreaPixels, setCroppedAreaPixels] = useState({ x: 0, y: 0, width: 100, height: 100 })\n  const [aspect, setAspect] = useState(null) // null = free\n\n  // Unified upload handler for file or URL\n  const handleFileUpload = useCallback((files, urlInput = null) => {\n    if ((!files || files.length === 0) && !urlInput) return\n    setErrorMessage(null)\n    setResultUrl(null)\n    let url\n    if (uploadMethod === 'url' && urlInput) {\n      url = urlInput\n    } else {\n      url = URL.createObjectURL(files[0])\n    }\n    setMediaUrl(url)\n    // Reset crop state when new image is loaded\n    setCrop({ x: 0, y: 0 })\n    setZoom(1)\n    setCroppedAreaPixels({ x: 0, y: 0, width: 100, height: 100 })\n    setWorkflowState('editing')\n  }, [uploadMethod])\n\n  // Handle crop complete from Cropper\n  const onCropComplete = useCallback((croppedArea, croppedAreaPixels) => {\n    if (croppedAreaPixels && \n        typeof croppedAreaPixels.x === 'number' && \n        typeof croppedAreaPixels.y === 'number' && \n        typeof croppedAreaPixels.width === 'number' && \n        typeof croppedAreaPixels.height === 'number') {\n      setCroppedAreaPixels(croppedAreaPixels)\n    }\n  }, [])\n\n  // Handle aspect ratio change\n  const handleAspectChange = (value) => {\n    if (value === 'free') {\n      setAspect(null)\n    } else if (value === 'square') {\n      setAspect(1)\n    } else if (value === '4:3') {\n      setAspect(4/3)\n    } else if (value === '16:9') {\n      setAspect(16/9)\n    } else if (value === '3:2') {\n      setAspect(3/2)\n    } else if (value === '2:1') {\n      setAspect(2)\n    } else if (value === 'golden') {\n      setAspect(1.618)\n    } else {\n      setAspect(null)\n    }\n  }\n\n  // Handle crop process\n  const handleProcess = useCallback(async () => {\n    if (!mediaUrl || !croppedAreaPixels) return\n    setErrorMessage(null)\n    setIsProcessing(true)\n    setResultUrl(null)\n    setWorkflowState('processing')\n    try {\n      const formData = new FormData()\n      if (uploadMethod === 'url') {\n        formData.append('url', mediaUrl)\n      } else {\n        const response = await fetch(mediaUrl)\n        const blob = await response.blob()\n        formData.append('file', blob, 'image.gif')\n      }\n      formData.append('x', Math.round(croppedAreaPixels.x).toString())\n      formData.append('y', Math.round(croppedAreaPixels.y).toString())\n      formData.append('width', Math.round(croppedAreaPixels.width).toString())\n      formData.append('height', Math.round(croppedAreaPixels.height).toString())\n      formData.append('aspect_ratio', aspect || 'free')\n      const apiUrl = import.meta.env.VITE_API_URL || 'http://localhost:5001'\n      const response = await fetch(`${apiUrl}/api/crop`, {\n        method: 'POST',\n        body: formData\n      })\n      if (response.ok) {\n        const data = await response.json()\n        const taskId = data.task_id\n        if (!taskId) throw new Error('No task_id returned from backend.')\n        let status = null\n        let result = null\n        for (let i = 0; i < 60; i++) {\n          const statusResp = await fetch(`${apiUrl}/api/task-status/${taskId}`)\n          if (statusResp.ok) {\n            const statusData = await statusResp.json()\n            status = statusData.status || statusData.state\n            result = statusData.result\n            if ((status === 'SUCCESS' || status === 'Task completed!') && result) {\n              break\n            } else if (status === 'FAILURE') {\n              throw new Error(statusData.error || 'GIF crop failed.')\n            }\n          }\n          await new Promise(res => setTimeout(res, 1000))\n        }\n        if ((status === 'SUCCESS' || status === 'Task completed!') && result) {\n          // Fetch the actual GIF from /api/download/<result>\n          const downloadResp = await fetch(`${apiUrl}/api/download/${result}`)\n          if (!downloadResp.ok) throw new Error('Failed to fetch result GIF.')\n          const gifBlob = await downloadResp.blob()\n          const url = URL.createObjectURL(gifBlob)\n          const resultUrlObj = {\n            previewUrl: url,\n            downloadUrl: `${apiUrl}/api/download/${result}`\n          }\n          setResultUrl(resultUrlObj)\n          setWorkflowState('result')\n        } else {\n          throw new Error('GIF crop timed out. Please try again.')\n        }\n      } else {\n        const errorData = await response.json()\n        setErrorMessage(errorData.error || 'An unknown error occurred during processing.')\n        setWorkflowState('editing')\n      }\n    } catch (error) {\n      setErrorMessage(error.message || 'Network error or unexpected issue.')\n      setWorkflowState('editing')\n    } finally {\n      setIsProcessing(false)\n    }\n  }, [uploadMethod, mediaUrl, croppedAreaPixels, aspect])\n\n  // Reset workflow to upload state\n  const resetWorkflow = () => {\n    setWorkflowState('upload')\n    setMediaUrl(null)\n    setResultUrl(null)\n    setErrorMessage(null)\n    setCrop({ x: 0, y: 0 })\n    setZoom(1)\n    setCroppedAreaPixels({ x: 0, y: 0, width: 100, height: 100 })\n    setAspect(null)\n  }\n\n  // --- Render ---\n  return (\n    <>\n      <ToolPageLayout\n        title=\"Crop GIF\"\n        description=\"Crop and trim GIFs online for free. Remove unwanted parts and focus on the important content. Perfect for social media and messaging.\"\n        icon={Crop}\n        seoProps={{\n          title: \"Crop GIF - Crop and Trim GIFs Online | EasyGIFMaker\",\n          description: \"Crop and trim GIFs online for free. Remove unwanted parts and focus on the important content. Perfect for social media and messaging.\",\n          keywords: \"crop gif, trim gif, cut gif, gif cropper, gif editor, crop animated gif, gif maker, free gif maker, online gif maker, gif converter, gif creator\",\n          canonical: \"https://easygifmaker.com/crop\"\n        }}\n        howToSteps={[\n          {\n            \"@type\": \"HowToStep\",\n            \"name\": \"Upload GIF\",\n            \"text\": \"Select a GIF file or enter a GIF URL to crop.\"\n          },\n          {\n            \"@type\": \"HowToStep\",\n            \"name\": \"Select Crop Area\",\n            \"text\": \"Use the interactive crop tool to select the area you want to keep.\"\n          },\n          {\n            \"@type\": \"HowToStep\",\n            \"name\": \"Adjust and Preview\",\n            \"text\": \"Fine-tune your crop selection and preview the result.\"\n          },\n          {\n            \"@type\": \"HowToStep\",\n            \"name\": \"Download Cropped GIF\",\n            \"text\": \"Download your cropped GIF with the selected area!\"\n          }\n        ]}\n      >\n        <HowToUseSection\n          title=\"How to Use the GIF Cropper\"\n          steps={[\n            {\n              title: \"Upload your GIF\",\n              description: \"Select a GIF file or enter a GIF URL to crop.\"\n            },\n            {\n              title: \"Select crop area\",\n              description: \"Drag to create a selection box around the area you want to keep.\"\n            },\n            {\n              title: \"Adjust and preview\",\n              description: \"Fine-tune your selection and preview the cropped result.\"\n            },\n            {\n              title: \"Download cropped GIF\",\n              description: \"Download your perfectly cropped GIF!\"\n            }\n          ]}\n        />\n\n  {/* Value content moved to end of page */}\n\n\n          {/* Upload State */}\n          {workflowState === 'upload' && (\n            <UploadState\n              title=\"Upload GIF to Crop\"\n              description=\"Select a GIF file or enter a GIF URL to crop and trim\"\n              errorMessage={errorMessage}\n              uploadMethod={uploadMethod}\n              setUploadMethod={setUploadMethod}\n              onFileSelect={(files) => handleFileUpload(files)}\n              onUrlSubmit={(url) => handleFileUpload(null, url)}\n              isProcessing={isProcessing}\n              supportedFormats=\"Supported formats: GIF only\"\n              accept=\"image/gif\"\n              toolName=\"GIF\"\n              useGradient={false}\n            />\n          )}\n\n          {/* Editing State */}\n          {workflowState === 'editing' && (\n            <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n              {/* GIF Preview and Cropper */}\n              <div className=\"lg:col-span-2\">\n                <Card className=\"bg-gradient-to-br from-white to-blue-50/30 shadow-lg\">\n                  <CardHeader className=\"pb-4\">\n                    <CardTitle className=\"text-2xl font-bold text-gray-800\">GIF Preview & Cropper</CardTitle>\n                    <CardDescription className=\"text-gray-600\">\n                      Drag to select the area you want to keep in your GIF\n                    </CardDescription>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"bg-gradient-to-br from-gray-50/50 to-blue-50/30 rounded-2xl p-6 mb-6 backdrop-blur-sm\">\n                      <CropperCanvas\n                        imageUrl={mediaUrl}\n                        aspect={aspect}\n                        crop={crop}\n                        zoom={zoom}\n                        onCropChange={setCrop}\n                        onZoomChange={setZoom}\n                        onCropComplete={onCropComplete}\n                      />\n                    </div>\n                    <div className=\"flex gap-4\">\n                      <Button onClick={resetWorkflow} variant=\"outline\" className=\"flex-1 bg-white/80 backdrop-blur-sm hover:bg-white transition-all duration-300\">\n                        Upload Different GIF\n                      </Button>\n                      <Button \n                        onClick={handleProcess}\n                        disabled={isProcessing}\n                        className=\"flex-1 bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 text-white shadow-lg hover:shadow-xl transition-all duration-300 transform hover:scale-105\"\n                      >\n                        {isProcessing ? 'Cropping...' : 'Crop GIF'}\n                      </Button>\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n              {/* Crop Settings Panel */}\n              <div>\n                <Card className=\"bg-gradient-to-br from-white to-indigo-50/30 shadow-lg\">\n                  <CardHeader className=\"pb-4\">\n                    <CardTitle className=\"flex items-center gap-3 text-xl font-bold text-gray-800\">\n                      <div className=\"p-2 bg-gradient-to-r from-blue-500 to-purple-500 rounded-lg\">\n                        <Crop className=\"h-5 w-5 text-white\" />\n                      </div>\n                      Crop Settings\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-6\">\n                      <div className=\"bg-white/60 backdrop-blur-sm rounded-xl p-4\">\n                        <label htmlFor=\"crop-x\" className=\"block font-semibold mb-3 text-gray-800\">\n                          X Position\n                          <span className=\"text-sm text-gray-500 ml-2 font-normal\">(pixels)</span>\n                        </label>\n                        <input\n                          id=\"crop-x\"\n                          type=\"number\"\n                          value={croppedAreaPixels.x || 0}\n                          onChange={e => {\n                            const newX = parseInt(e.target.value, 10) || 0\n                            setCroppedAreaPixels({ ...croppedAreaPixels, x: newX })\n                          }}\n                          min=\"0\"\n                          max=\"1000\"\n                          className=\"w-full bg-white/80 backdrop-blur-sm rounded-lg px-3 py-2 text-center font-medium shadow-sm focus:ring-2 focus:ring-blue-500 focus:outline-none\"\n                        />\n                      </div>\n                      \n                      <div className=\"bg-white/60 backdrop-blur-sm rounded-xl p-4\">\n                        <label htmlFor=\"crop-y\" className=\"block font-semibold mb-3 text-gray-800\">\n                          Y Position\n                          <span className=\"text-sm text-gray-500 ml-2 font-normal\">(pixels)</span>\n                        </label>\n                        <input\n                          id=\"crop-y\"\n                          type=\"number\"\n                          value={croppedAreaPixels.y || 0}\n                          onChange={e => {\n                            const newY = parseInt(e.target.value, 10) || 0\n                            setCroppedAreaPixels({ ...croppedAreaPixels, y: newY })\n                          }}\n                          min=\"0\"\n                          max=\"1000\"\n                          className=\"w-full bg-white/80 backdrop-blur-sm rounded-lg px-3 py-2 text-center font-medium shadow-sm focus:ring-2 focus:ring-green-500 focus:outline-none\"\n                        />\n                      </div>\n\n                      <div className=\"bg-white/60 backdrop-blur-sm rounded-xl p-4\">\n                        <label htmlFor=\"crop-width\" className=\"block font-semibold mb-3 text-gray-800\">\n                          Width\n                          <span className=\"text-sm text-gray-500 ml-2 font-normal\">(pixels)</span>\n                        </label>\n                        <input\n                          id=\"crop-width\"\n                          type=\"number\"\n                          value={croppedAreaPixels.width || 0}\n                          onChange={e => {\n                            const newWidth = parseInt(e.target.value, 10) || 0\n                            setCroppedAreaPixels({ ...croppedAreaPixels, width: newWidth })\n                          }}\n                          min=\"10\"\n                          max=\"1000\"\n                          className=\"w-full bg-white/80 backdrop-blur-sm rounded-lg px-3 py-2 text-center font-medium shadow-sm focus:ring-2 focus:ring-purple-500 focus:outline-none\"\n                        />\n                      </div>\n\n                      <div className=\"bg-white/60 backdrop-blur-sm rounded-xl p-4\">\n                        <label htmlFor=\"crop-height\" className=\"block font-semibold mb-3 text-gray-800\">\n                          Height\n                          <span className=\"text-sm text-gray-500 ml-2 font-normal\">(pixels)</span>\n                        </label>\n                        <input\n                          id=\"crop-height\"\n                          type=\"number\"\n                          value={croppedAreaPixels.height || 0}\n                          onChange={e => {\n                            const newHeight = parseInt(e.target.value, 10) || 0\n                            setCroppedAreaPixels({ ...croppedAreaPixels, height: newHeight })\n                          }}\n                          min=\"10\"\n                          max=\"1000\"\n                          className=\"w-full bg-white/80 backdrop-blur-sm rounded-lg px-3 py-2 text-center font-medium shadow-sm focus:ring-2 focus:ring-orange-500 focus:outline-none\"\n                        />\n                      </div>\n                    </div>\n                    \n                    {/* Aspect Ratio Selector */}\n                    <div className=\"bg-white/60 backdrop-blur-sm rounded-xl p-4\">\n                      <label htmlFor=\"aspect-ratio\" className=\"block font-semibold mb-3 text-gray-800\">\n                        Aspect Ratio\n                        <span className=\"text-sm text-gray-500 ml-2 font-normal\">(optional)</span>\n                      </label>\n                      <Select value={aspect === null ? 'free' : \n                        aspect === 1 ? 'square' :\n                        aspect === 4/3 ? '4:3' :\n                        aspect === 16/9 ? '16:9' :\n                        aspect === 3/2 ? '3:2' :\n                        aspect === 2 ? '2:1' :\n                        aspect === 1.618 ? 'golden' : 'free'} \n                        onValueChange={handleAspectChange}>\n                        <SelectTrigger className=\"w-full bg-white/80 backdrop-blur-sm\">\n                          <SelectValue placeholder=\"Select aspect ratio\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"free\">Free (Custom)</SelectItem>\n                          <SelectItem value=\"square\">Square (1:1)</SelectItem>\n                          <SelectItem value=\"4:3\">4:3</SelectItem>\n                          <SelectItem value=\"16:9\">16:9</SelectItem>\n                          <SelectItem value=\"3:2\">3:2</SelectItem>\n                          <SelectItem value=\"2:1\">2:1</SelectItem>\n                          <SelectItem value=\"golden\">Golden Ratio (1.618:1)</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n          \n          {/* Mid-content Ad */}\n                              <div className=\"my-8 flex justify-center\">\n                                <InArticleAd \n                                  slot=\"8336674411\"\n                                  className=\"max-w-2xl w-full\"\n                                />\n                                </div>\n                    \n          <EnhancedTipsSection\n            title=\"Pro Tips for Perfect Cropping\"\n            tips={[\n              \"<strong>Focus on Subject</strong> Crop to highlight the main action or subject. Keep the most important elements in frame.\",\n              \"<strong>Remove Distractions</strong> Eliminate unwanted background elements that don't add to your story.\",\n              \"<strong>Maintain Quality</strong> Don't crop too small to preserve detail. Keep at least 200x200px for good quality.\",\n              \"<strong>Consider Aspect Ratio</strong> Think about where you'll use the GIF. Square works well for Instagram, wider for Twitter.\",\n              \"<strong>Preview First</strong> Check the result before finalizing. Make sure the crop looks good throughout the animation.\",\n              \"<strong>Use Coordinates</strong> Use the X/Y position and width/height inputs for precise control over your crop area.\"\n            ]}\n          />\n                  </CardContent>\n                </Card>\n              </div>\n            </div>\n          )}\n\n          {/* Processing State */}\n          {workflowState === 'processing' && (\n            <ProcessingState\n              title=\"Cropping Your GIF\"\n              description=\"Processing your cropped GIF...\"\n            />\n          )}\n\n          {/* Result State */}\n          {workflowState === 'result' && resultUrl && (\n            <ResultSection\n              title=\"Your Cropped GIF is Ready!\"\n              description=\"Your GIF has been successfully cropped to your specifications.\"\n              imageUrl={resultUrl.previewUrl}\n              downloadFileName=\"cropped.gif\"\n              downloadUrl={resultUrl.downloadUrl}\n              onReset={resetWorkflow}\n            />\n          )}\n        \n        <ToolSeoSection\n          icon={Crop}\n          title=\"Crop GIF\"\n          description1=\"Perfect your GIFs with our powerful online cropping tool. Remove unwanted areas, focus on the most important parts, and create clean, professional GIFs that grab attention. Whether you're removing backgrounds, focusing on specific actions, or creating perfectly sized GIFs for different platforms.\"\n          description2=\"Our intuitive cropping interface lets you precisely select the area you want to keep, with real-time preview so you can see exactly what your final GIF will look like. Perfect for content creators, marketers, and anyone who wants to create polished, professional GIFs.\"\n          features1={[\n            { emoji: \"✂️\", text: \"Precise cropping with pixel-perfect control\" },\n            { emoji: \"👁️\", text: \"Real-time preview of cropped results\" },\n            { emoji: \"🎯\", text: \"Focus on specific areas or subjects\" }\n          ]}\n          features2={[\n            { emoji: \"💎\", text: \"Maintain animation quality\" },\n            { emoji: \"📱\", text: \"Optimize for any platform\" }\n          ]}\n          useCases={[\n            { color: \"bg-yellow-400\", text: \"Remove unwanted backgrounds from GIFs\" },\n            { color: \"bg-green-400\", text: \"Focus on specific actions or subjects\" },\n            { color: \"bg-blue-400\", text: \"Create square GIFs for social media\" },\n            { color: \"bg-purple-400\", text: \"Trim GIFs to fit specific dimensions\" }\n          ]}\n        />\n          <AdsenseAd adSlot=\"8336674411\" adFormat=\"fluid\" adLayout=\"in-article\" />\n          <TipsFaqsBestPracticesSection \n            proTips={[\n              {\n                color: \"bg-blue-500\",\n                text: \"Focus on the main subject or action in your GIF for better visual impact.\"\n              },\n              {\n                color: \"bg-green-500\",\n                text: \"Remove distracting background elements for cleaner, more focused results.\"\n              },\n              {\n                color: \"bg-purple-500\",\n                text: \"Choose appropriate aspect ratios for your target platform (square for Instagram, 16:9 for YouTube).\"\n              },\n              {\n                color: \"bg-orange-500\",\n                text: \"Don't crop too small to maintain quality and detail in your final GIF.\"\n              }\n            ]}\n            faqs={[\n              {\n                question: \"Will cropping affect animation quality?\",\n                answer: \"No, our tool maintains animation smoothness while cropping.\"\n              },\n              {\n                question: \"Can I crop to any size?\",\n                answer: \"Yes, you can set custom width and height values.\"\n              },\n              {\n                question: \"What's the minimum crop size?\",\n                answer: \"Minimum 10x10 pixels for optimal results.\"\n              },\n              {\n                question: \"Does cropping reduce file size?\",\n                answer: \"Yes, smaller cropped areas typically result in smaller files.\"\n              }\n            ]}\n            relatedResources={[\n              {\n                href: \"/blog/top-5-gif-optimization-tips\",\n                icon: \"⚡\",\n                text: \"Top 5 GIF Optimization Tips\"\n              },\n              {\n                href: \"/blog/how-to-make-gifs-from-videos\",\n                icon: \"📹\",\n                text: \"How to Make GIFs from Videos\"\n              }\n            ]}\n          />\n\n          <TroubleshootingSection \n            commonIssues={[\n              {\n                color: \"bg-yellow-500\",\n                text: \"If the crop area is too small, increase the dimensions.\"\n              },\n              {\n                color: \"bg-orange-500\",\n                text: \"If upload fails, check your file format (GIF only) and file size.\"\n              },\n              {\n                color: \"bg-red-500\",\n                text: \"Still having issues?\",\n                link: \"/contact\"\n              }\n            ]}\n            quickFixes={[\n              {\n                icon: \"✂️\",\n                text: \"Use precise coordinates for accurate cropping\"\n              },\n              {\n                icon: \"👁️\",\n                text: \"Preview before finalizing your crop\"\n              },\n              {\n                icon: \"📏\",\n                text: \"Maintain aspect ratio for better results\"\n              }\n            ]}\n          />\n\n          <SocialSharingSection \n            title=\"Share Your Cropped GIF!\"\n            description=\"Share your perfectly cropped GIF on Instagram, Twitter, TikTok, Facebook, or embed it in your blog or website. Tag us with #EasyGIFMaker for a chance to be featured!\"\n          />\n\n          {/* Value Content Section (moved to end) */}\n          {/* Bottom Ad - Before value content */}\n          <div className=\"my-8 flex justify-center\">\n            <DisplayAd \n              slot=\"1125232950\"\n              className=\"max-w-3xl w-full\"\n            />\n          </div>\n          <ValueContentSection\n            toolTitle=\"GIF Cropper\"\n            relatedLinks={[\n              { href: '/blog/professional-gif-cropping-and-composition-guide', label: 'Professional GIF Cropping and Composition Guide' },\n              { href: '/blog/creative-gif-design-tutorial', label: 'Creative GIF Design Tutorial' }\n            ]}\n            altTools={[\n              { href: '/resize', label: 'Resize GIF', desc: 'Change dimensions without cropping.' },\n              { href: '/optimize', label: 'Optimize GIF', desc: 'Compress for faster loading.' },\n              { href: '/add-text', label: 'Add Text to GIF', desc: 'Add captions and labels.' }\n            ]}\n          />\n\n        </ToolPageLayout>\n    </>\n  )\n}"],"names":["CropperCanvas","imageUrl","aspect","crop","zoom","onCropChange","onZoomChange","onCropComplete","safeCrop","x","isNaN","y","safeZoom","jsx","style","position","width","height","background","children","Cropper","image","cropShape","showGrid","containerStyle","borderRadius","CropTool","workflowState","setWorkflowState","useState","uploadMethod","setUploadMethod","mediaUrl","setMediaUrl","isProcessing","setIsProcessing","resultUrl","setResultUrl","errorMessage","setErrorMessage","setCrop","setZoom","croppedAreaPixels","setCroppedAreaPixels","setAspect","handleFileUpload","useCallback","files","urlInput","length","url","URL","createObjectURL","croppedArea","handleProcess","async","formData","FormData","append","response","fetch","blob","Math","round","toString","apiUrl","method","body","ok","taskId","json","task_id","Error","status","result","i","statusResp","statusData","state","error","Promise","res","setTimeout","downloadResp","gifBlob","previewUrl","downloadUrl","errorData","message","resetWorkflow","Fragment","jsxs","ToolPageLayout","title","description","icon","Crop","seoProps","keywords","canonical","howToSteps","name","text","HowToUseSection","steps","UploadState","onFileSelect","onUrlSubmit","supportedFormats","accept","toolName","useGradient","className","Card","CardHeader","CardTitle","CardDescription","CardContent","Button","onClick","variant","disabled","htmlFor","id","type","value","onChange","e","newX","parseInt","target","min","max","newY","newWidth","newHeight","Select","onValueChange","SelectTrigger","SelectValue","placeholder","SelectContent","SelectItem","InArticleAd","slot","EnhancedTipsSection","tips","ProcessingState","ResultSection","downloadFileName","onReset","ToolSeoSection","description1","description2","features1","emoji","features2","useCases","color","AdsenseAd","adSlot","adFormat","adLayout","TipsFaqsBestPracticesSection","proTips","faqs","question","answer","relatedResources","href","TroubleshootingSection","commonIssues","link","quickFixes","SocialSharingSection","DisplayAd","ValueContentSection","toolTitle","relatedLinks","label","altTools","desc"],"mappings":"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"}